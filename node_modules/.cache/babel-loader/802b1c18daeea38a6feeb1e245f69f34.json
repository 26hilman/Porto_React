{"ast":null,"code":"import _regeneratorRuntime from \"/home/alphatech/portofolio/porto_react/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/alphatech/portofolio/porto_react/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/alphatech/portofolio/porto_react/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport createStore from \"unistore\";\nimport axios from \"axios\";\nvar initialState = {\n  token: \"\",\n  username: \"\",\n  password: \"\",\n  full_name: \"\",\n  email: \"\",\n  is_login: false,\n  iata_asal: \"\",\n  airport_id_asal: \"\",\n  airport_name_asal: \"\",\n  nation_code_asal: \"\",\n  latitude_asal: \"\",\n  longitude_asal: \"\",\n  iata_tujuan: \"\",\n  airport_id_tujuan: \"\",\n  airport_name_tujuan: \"\",\n  nation_code_tujuan: \"\",\n  latitude_tujuan: \"\",\n  longitude_tujuan: \"\",\n  flight_list: [],\n  weather: \"\",\n  code: \"\",\n  weather_code: \"\",\n  temperature: \"\",\n  sunrise: \"\",\n  sunset: \"\",\n  rate: \"\",\n  base_currency: \"\",\n  target_currency: \"\",\n  new_sum: \"\",\n  base_sum: \"\",\n  word: \"\",\n  distance_in_km: \"\"\n};\nexport var store = createStore(initialState);\nexport var actions = function actions(store) {\n  return {\n    setField: function setField(state, event) {\n      return _defineProperty({}, event.target.name, event.target.value);\n    },\n    postLogout: function postLogout(state) {\n      return {\n        is_login: false\n      };\n    },\n    postLogin: function () {\n      var _postLogin = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(state) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                data = {\n                  username: state.username,\n                  password: state.password\n                };\n                _context.next = 3;\n                return axios.post(\"https://api.halocuk.web.id/user/login/\", data).then(function (response) {\n                  console.log(\"Login\", response.Token);\n\n                  if (response.data.hasOwnProperty(\"token\")) {\n                    store.setState({\n                      token: response.Token,\n                      is_login: true,\n                      full_name: state.username,\n                      email: response.data.email\n                    });\n                  }\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function postLogin(_x) {\n        return _postLogin.apply(this, arguments);\n      }\n\n      return postLogin;\n    }(),\n    setAsal: function setAsal(state, e) {\n      store.setState({\n        iata_asal: e.target.value\n      });\n    },\n    setTujuan: function setTujuan(state, e) {\n      store.setState({\n        iata_tujuan: e.target.value\n      });\n    },\n    setCurrAsal: function setCurrAsal(state, e) {\n      store.setState({\n        base_currency: e.target.value\n      });\n    },\n    setCurrTujuan: function setCurrTujuan(state, e) {\n      store.setState({\n        target_currency: e.target.value\n      });\n    },\n    //get estimated flight price\n    getPrice: function getPrice(state, lat_asal, long_asal, lat_tujuan, long_tujuan) {\n      var rad = function rad(x) {\n        return x * Math.PI / 180;\n      };\n\n      var radius_bumi = 6378137; // Earthâ€™s mean radius in meter\n\n      var latitude = rad(lat_asal - lat_tujuan); // latitude awal - latitude akhir\n\n      var longitude = rad(long_asal - long_tujuan); // longitude awal - longitude akhir\n\n      var a = Math.sin(latitude / 2) * Math.sin(latitude / 2) + Math.cos(rad(lat_tujuan)) * Math.cos(rad(lat_asal)) * Math.sin(longitude / 2) * Math.sin(longitude / 2);\n      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n      var distance_in_km = radius_bumi * c / 1000;\n      store.setState({\n        distance_in_km: distance_in_km\n      });\n    },\n    //get new currency\n    getNewCurrency: function () {\n      var _getNewCurrency = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(state, moneysum) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return axios.get(\"https://api.exchangeratesapi.io/latest?base=\" + state.base_currency).then(function (response) {\n                  store.setState({\n                    rate: response.data.rates[state.target_currency]\n                  });\n                  var new_value = state.rate * moneysum;\n                  store.setState({\n                    new_sum: new_value\n                  });\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function getNewCurrency(_x2, _x3) {\n        return _getNewCurrency.apply(this, arguments);\n      }\n\n      return getNewCurrency;\n    }(),\n    //get weather\n    getWeather: function () {\n      var _getWeather = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(state) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return axios.get(\"http://api.weatherbit.io/v2.0/current?lat=\" + state.latitude_tujuan + \"&lon=\" + state.longitude_tujuan + \"&key=aa3c976285c64dafa3662f2e99d4bd03\").then(function (response) {\n                  store.setState({\n                    weather: response.data.data[0].weather.description,\n                    temperature: response.data.data[0].temp,\n                    sunrise: response.data.data[0].sunrise,\n                    sunset: response.data.data[0].sunset,\n                    weather_code: response.data.data[0].weather.code\n                  });\n                }).catch(function (error) {\n                  console.log(error);\n                });\n\n              case 2:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      function getWeather(_x4) {\n        return _getWeather.apply(this, arguments);\n      }\n\n      return getWeather;\n    }(),\n    //get api data for flight and currency\n    getData: function () {\n      var _getData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(state) {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return axios.all([axios.get(\"https://aviation-edge.com/v2/public/airportDatabase?key=57d91e-653b78&codeIataAirport=\" + state.iata_asal), axios.get(\"https://aviation-edge.com/v2/public/airportDatabase?key=57d91e-653b78&codeIataAirport=\" + state.iata_tujuan), axios.get(\"http://aviation-edge.com/v2/public/timetable?key=57d91e-653b78&type=departure&status=scheduled&iataCode=\" + state.iata_asal), axios.get(\"https://api.exchangeratesapi.io/latest?base=\" + state.base_currency)]).then(axios.spread(function (response1, response2, response3, response4) {\n                  store.setState({\n                    airport_id_asal: response1.data[0].airportId,\n                    airport_name_asal: response1.data[0].nameAirport,\n                    nation_code_asal: response1.data[0].codeIso2Country,\n                    latitude_asal: response1.data[0].latitudeAirport,\n                    longitude_asal: response1.data[0].longitudeAirport\n                  });\n                  store.setState({\n                    airport_id_tujuan: response2.data[0].airportId,\n                    airport_name_tujuan: response2.data[0].nameAirport,\n                    nation_code_tujuan: response2.data[0].codeIso2Country,\n                    latitude_tujuan: response2.data[0].latitudeAirport,\n                    longitude_tujuan: response2.data[0].longitudeAirport\n                  });\n                  store.setState({\n                    flight_list: response3.data\n                  });\n                  store.setState({\n                    rate: response4.data.rates.USD\n                  });\n                })).catch(function (error) {});\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      function getData(_x5) {\n        return _getData.apply(this, arguments);\n      }\n\n      return getData;\n    }()\n  };\n};","map":{"version":3,"sources":["/home/alphatech/portofolio/porto_react/src/store.js"],"names":["createStore","axios","initialState","token","username","password","full_name","email","is_login","iata_asal","airport_id_asal","airport_name_asal","nation_code_asal","latitude_asal","longitude_asal","iata_tujuan","airport_id_tujuan","airport_name_tujuan","nation_code_tujuan","latitude_tujuan","longitude_tujuan","flight_list","weather","code","weather_code","temperature","sunrise","sunset","rate","base_currency","target_currency","new_sum","base_sum","word","distance_in_km","store","actions","setField","state","event","target","name","value","postLogout","postLogin","data","post","then","response","console","log","Token","hasOwnProperty","setState","catch","error","setAsal","e","setTujuan","setCurrAsal","setCurrTujuan","getPrice","lat_asal","long_asal","lat_tujuan","long_tujuan","rad","x","Math","PI","radius_bumi","latitude","longitude","a","sin","cos","c","atan2","sqrt","getNewCurrency","moneysum","get","rates","new_value","getWeather","description","temp","getData","all","spread","response1","response2","response3","response4","airportId","nameAirport","codeIso2Country","latitudeAirport","longitudeAirport","USD"],"mappings":"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","sourcesContent":["import createStore from \"unistore\";\nimport axios from \"axios\";\n\nconst initialState = {\n  token: \"\",\n  username: \"\",\n  password: \"\",\n  full_name: \"\",\n  email: \"\",\n  is_login: false,\n  iata_asal: \"\",\n  airport_id_asal: \"\",\n  airport_name_asal: \"\",\n  nation_code_asal: \"\",\n  latitude_asal: \"\",\n  longitude_asal: \"\",\n  iata_tujuan: \"\",\n  airport_id_tujuan: \"\",\n  airport_name_tujuan: \"\",\n  nation_code_tujuan: \"\",\n  latitude_tujuan: \"\",\n  longitude_tujuan: \"\",\n  flight_list: [],\n  weather: \"\",\n  code: \"\",\n  weather_code: \"\",\n  temperature: \"\",\n  sunrise: \"\",\n  sunset: \"\",\n  rate: \"\",\n  base_currency: \"\",\n  target_currency: \"\",\n  new_sum: \"\",\n  base_sum: \"\",\n  word: \"\",\n  distance_in_km: \"\"\n};\n\nexport const store = createStore(initialState);\n\nexport const actions = store => ({\n  setField: (state, event) => {\n    return { [event.target.name]: event.target.value };\n  },\n\n  postLogout: state => {\n    return { is_login: false };\n  },\n\n  postLogin: async state => {\n    const data = { username: state.username, password: state.password };\n    await axios\n      .post(\"https://api.halocuk.web.id/user/login/\", data)\n      .then(response => {\n        console.log(\"Login\", response.Token);\n        if (response.data.hasOwnProperty(\"token\")) {\n          store.setState({\n            token: response.Token,\n            is_login: true,\n            full_name: state.username,\n            email: response.data.email\n          });\n        }\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  },\n\n  setAsal: (state, e) => {\n    store.setState({ iata_asal: e.target.value });\n  },\n\n  setTujuan: (state, e) => {\n    store.setState({ iata_tujuan: e.target.value });\n  },\n\n  setCurrAsal: (state, e) => {\n    store.setState({ base_currency: e.target.value });\n  },\n\n  setCurrTujuan: (state, e) => {\n    store.setState({ target_currency: e.target.value });\n  },\n\n  //get estimated flight price\n  getPrice: (state, lat_asal, long_asal, lat_tujuan, long_tujuan) => {\n    const rad = function(x) {\n      return (x * Math.PI) / 180;\n    };\n\n    const radius_bumi = 6378137; // Earthâ€™s mean radius in meter\n    const latitude = rad(lat_asal - lat_tujuan); // latitude awal - latitude akhir\n    const longitude = rad(long_asal - long_tujuan); // longitude awal - longitude akhir\n    const a =\n      Math.sin(latitude / 2) * Math.sin(latitude / 2) +\n      Math.cos(rad(lat_tujuan)) *\n        Math.cos(rad(lat_asal)) *\n        Math.sin(longitude / 2) *\n        Math.sin(longitude / 2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    const distance_in_km = (radius_bumi * c) / 1000;\n    store.setState({ distance_in_km: distance_in_km });\n  },\n\n  //get new currency\n  getNewCurrency: async (state, moneysum) => {\n    await axios\n      .get(\"https://api.exchangeratesapi.io/latest?base=\" + state.base_currency)\n      .then(function(response) {\n        store.setState({ rate: response.data.rates[state.target_currency] });\n        const new_value = state.rate * moneysum;\n        store.setState({ new_sum: new_value });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  },\n\n  //get weather\n  getWeather: async state => {\n    await axios\n      .get(\n        \"http://api.weatherbit.io/v2.0/current?lat=\" +\n          state.latitude_tujuan +\n          \"&lon=\" +\n          state.longitude_tujuan +\n          \"&key=aa3c976285c64dafa3662f2e99d4bd03\"\n      )\n      .then(function(response) {\n        store.setState({\n          weather: response.data.data[0].weather.description,\n          temperature: response.data.data[0].temp,\n          sunrise: response.data.data[0].sunrise,\n          sunset: response.data.data[0].sunset,\n          weather_code: response.data.data[0].weather.code\n        });\n      })\n      .catch(function(error) {\n        console.log(error);\n      });\n  },\n\n  //get api data for flight and currency\n  getData: async state => {\n    await axios\n      .all([\n        axios.get(\n          \"https://aviation-edge.com/v2/public/airportDatabase?key=57d91e-653b78&codeIataAirport=\" +\n            state.iata_asal\n        ),\n        axios.get(\n          \"https://aviation-edge.com/v2/public/airportDatabase?key=57d91e-653b78&codeIataAirport=\" +\n            state.iata_tujuan\n        ),\n        axios.get(\n          \"http://aviation-edge.com/v2/public/timetable?key=57d91e-653b78&type=departure&status=scheduled&iataCode=\" +\n            state.iata_asal\n        ),\n        axios.get(\n          \"https://api.exchangeratesapi.io/latest?base=\" + state.base_currency\n        )\n      ])\n      .then(\n        axios.spread(function(response1, response2, response3, response4) {\n          store.setState({\n            airport_id_asal: response1.data[0].airportId,\n            airport_name_asal: response1.data[0].nameAirport,\n            nation_code_asal: response1.data[0].codeIso2Country,\n            latitude_asal: response1.data[0].latitudeAirport,\n            longitude_asal: response1.data[0].longitudeAirport\n          });\n          store.setState({\n            airport_id_tujuan: response2.data[0].airportId,\n            airport_name_tujuan: response2.data[0].nameAirport,\n            nation_code_tujuan: response2.data[0].codeIso2Country,\n            latitude_tujuan: response2.data[0].latitudeAirport,\n            longitude_tujuan: response2.data[0].longitudeAirport\n          });\n          store.setState({ flight_list: response3.data });\n          store.setState({ rate: response4.data.rates.USD });\n        })\n      )\n      .catch(function(error) {});\n  }\n});\n"]},"metadata":{},"sourceType":"module"}